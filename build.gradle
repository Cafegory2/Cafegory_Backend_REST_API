import org.springframework.boot.gradle.tasks.bundling.BootJar

buildscript {
    ext {
        restdocsApiSpecVersion = '0.16.4'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.10'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
//    id 'checkstyle'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
    id 'org.hidetake.swagger.generator' version '2.18.2'

}

group = 'com.cafegory'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'commons-io:commons-io:2.11.0'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    runtimeOnly 'org.postgresql:postgresql'

    //JWT
//    implementation 'io.jsonwebtoken:jjwt:0.12.4'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    implementation 'com.h2database:h2'

    //querydsl
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.querydsl:querydsl-jpa:5.0.0'
    implementation 'com.querydsl:querydsl-apt:5.0.0'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // jpa json 타입
    implementation 'io.hypersistence:hypersistence-utils-hibernate-55:3.5.2'

    //spring boot starter mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // test container
    testImplementation "org.testcontainers:testcontainers:1.20.0"
    testImplementation "org.testcontainers:junit-jupiter:1.20.0"
    testImplementation "org.testcontainers:mariadb:1.20.0"

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:' + restdocsApiSpecVersion
    swaggerUI 'org.webjars:swagger-ui:5.17.14'

}

openapi3 {
    servers = [
            { url = 'http://localhost:8080' },
            { url = 'http://43.200.133.96:8080' }
    ]
    title = "Cafegory Server API"
    description = "Cafegory Server API for client"
    version = "0.0.1"
    format = "yaml"
}

swaggerSources {
    register("cafegoryApi").configure {
        setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(GenerateSwaggerUI) {
    dependsOn 'openapi3'
}

tasks.register('copySwaggerUI', Copy) {
    dependsOn 'generateSwaggerUICafegoryApi'

    def generateSwaggerTask = tasks.named('generateSwaggerUICafegoryApi', GenerateSwaggerUI).get()

    from("${generateSwaggerTask.outputDir}")
    into("${project.buildDir}/resources/main/static/docs")
}

tasks.named('bootRunMainClassName') {
    dependsOn 'copySwaggerUI'
}

tasks.named('bootJarMainClassName') {
    dependsOn 'copySwaggerUI'
}

tasks.withType(BootJar) {
    dependsOn 'copySwaggerUI'
}

//서브모듈 시작
tasks.named('processTestResources') {
    dependsOn 'copyTestSecret'
}

processResources.dependsOn('copySecret')

tasks.register('copyMainSecret', Copy) {
    from("./Cafegory_Backend_Settings/main") {
        include 'application*.yml'  // 복사할 파일들
    }
    into "./src/main/resources"  // 복사 위치
}

tasks.register('copyTestSecret', Copy) {
    from("./Cafegory_Backend_Settings/test") {
        include 'application*.yml'  // 복사할 파일들
    }
    into "./src/test/resources"  // 복사 위치
}

// 두 작업을 하나의 작업으로 묶어서 실행할 수 있도록 설정
tasks.register('copySecret') {
    dependsOn 'copyMainSecret', 'copyTestSecret'
}
//서브모듈 끝

jar {
    enabled = false
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'


//checkstyle {
//    maxWarnings = 0
//    configFile = file("checkstyle/naver-checkstyle-rules.xml")
//    configProperties = ["suppressionFile": "checkstyle/naver-checkstyle-suppressions.xml"]
//    sourceSets = [sourceSets.main, sourceSets.test]
//}

//checkstyleMain.source = fileTree('src/main/java')
//checkstyleTest.source = fileTree('src/test/java')

//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
//querydsl 추가 끝
